"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../../../node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "../../../../node_modules/deepmerge/dist/cjs.js"(exports, module2) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return target.propertyIsEnumerable(symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module2.exports = deepmerge_1;
  }
});

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  ChatComposer: () => ChatComposer
});
module.exports = __toCommonJS(src_exports);

// src/ChatComposer.tsx
var React3 = __toESM(require("react"));
var import_box2 = require("@twilio-paste/box");
var import_lexical_library3 = require("@twilio-paste/lexical-library");
var import_styling_library2 = require("@twilio-paste/styling-library");
var import_deepmerge = __toESM(require_cjs());

// src/styles.ts
var import_styling_library = require("@twilio-paste/styling-library");
var chatComposerLexicalStyles = import_styling_library.EmotionCSS`
.paste-chat-composer-paragraph {
  margin: 0;
  position: relative;
}

.paste-chat-composer-content-editable:focus {
  outline: none;
}
`;

// src/AutoLinkPlugin.tsx
var React = __toESM(require("react"));
var import_lexical_library = require("@twilio-paste/lexical-library");
var URL_MATCHER = /(?:(?:https?:\/\/(?:www\.)?)|(?:www\.))[\w#%+.:=@~-]{1,256}\.[\d()A-Za-z]{1,6}\b[\w#%&()+./:=?@~-]*/;
var EMAIL_MATCHER = /(?:(?:[^\s"(),.:;<>@[\\\]]+(?:\.[^\s"(),.:;<>@[\\\]]+)*)|(?:".+"))@(?:(?:\[(?:\d{1,3}\.){3}\d{1,3}])|(?:(?:[\dA-Za-z\-]+\.)+[A-Za-z]{2,}))/;
var MATCHERS = [
  (text) => {
    const match = URL_MATCHER.exec(text);
    return match && {
      index: match.index,
      length: match[0].length,
      text: match[0],
      url: match[0]
    };
  },
  (text) => {
    const match = EMAIL_MATCHER.exec(text);
    return match && {
      index: match.index,
      length: match[0].length,
      text: match[0],
      url: `mailto:${match[0]}`
    };
  }
];
var AutoLinkPlugin = () => {
  return /* @__PURE__ */ React.createElement(import_lexical_library.AutoLinkPlugin, { matchers: MATCHERS });
};
AutoLinkPlugin.displayName = "AutoLinkPlugin";

// src/PlaceholderWrapper.tsx
var React2 = __toESM(require("react"));
var import_box = require("@twilio-paste/box");
var PlaceholderWrapper = ({ placeholder, element }) => /* @__PURE__ */ React2.createElement(
  import_box.Box,
  {
    position: "absolute",
    top: "space30",
    left: "space40",
    right: "space40",
    display: "flex",
    alignItems: "center",
    color: "colorTextWeak",
    pointerEvents: "none",
    userSelect: "none",
    fontStyle: "italic",
    element
  },
  placeholder
);
PlaceholderWrapper.displayName = "PlaceholderWrapper";

// src/helpers.ts
var import_lexical_library2 = require("@twilio-paste/lexical-library");
var renderInitialText = (text) => {
  const root = (0, import_lexical_library2.$getRoot)();
  if (root.getFirstChild() === null) {
    const paragraph = (0, import_lexical_library2.$createParagraphNode)();
    paragraph.append((0, import_lexical_library2.$createTextNode)(text));
    root.append(paragraph);
  }
};
var baseConfig = {
  theme: {
    paragraph: "paste-chat-composer-paragraph"
  },
  nodes: [import_lexical_library2.AutoLinkNode]
};

// src/ChatComposer.tsx
var ChatComposer = React3.forwardRef(
  ({
    children,
    element = "CHAT_COMPOSER",
    onChange,
    placeholder = "",
    initialValue,
    config,
    maxHeight,
    disabled,
    ...props
  }, ref) => {
    const baseConfigWithEditorState = {
      ...baseConfig,
      editable: disabled ? false : true,
      editorState: initialValue ? () => renderInitialText(initialValue) : void 0
    };
    return /* @__PURE__ */ React3.createElement(
      import_box2.Box,
      {
        flexGrow: 1,
        ref,
        element,
        position: "relative",
        transition: "background-color 100ms ease-in,box-shadow 100ms ease-in,color 100ms ease-in",
        paddingY: "space30",
        paddingX: "space40",
        borderRadius: "borderRadius20",
        _focusWithin: { boxShadow: "shadowFocus" },
        overflowY: "scroll",
        maxHeight,
        disabled,
        "aria-disabled": disabled,
        _disabled: {
          color: "colorTextWeaker",
          backgroundColor: "colorBackground"
        }
      },
      /* @__PURE__ */ React3.createElement(import_styling_library2.StylingGlobals, { styles: chatComposerLexicalStyles }),
      /* @__PURE__ */ React3.createElement(import_lexical_library3.LexicalComposer, { initialConfig: (0, import_deepmerge.default)(baseConfigWithEditorState, config) }, /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(
        import_lexical_library3.RichTextPlugin,
        {
          contentEditable: /* @__PURE__ */ React3.createElement(import_lexical_library3.ContentEditable, { ...props, className: "paste-chat-composer-content-editable" }),
          placeholder: /* @__PURE__ */ React3.createElement(PlaceholderWrapper, { element: `${element}_PLACEHOLDER_WRAPPER`, placeholder }),
          ErrorBoundary: import_lexical_library3.ErrorBoundary
        }
      ), onChange && /* @__PURE__ */ React3.createElement(import_lexical_library3.OnChangePlugin, { onChange }), /* @__PURE__ */ React3.createElement(import_lexical_library3.HistoryPlugin, null), /* @__PURE__ */ React3.createElement(AutoLinkPlugin, null), children))
    );
  }
);
ChatComposer.displayName = "ChatComposer";
