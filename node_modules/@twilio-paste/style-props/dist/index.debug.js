"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  BACKGROUND_PROPS: () => BACKGROUND_PROPS,
  BORDER_COLOR_PROPS: () => BORDER_COLOR_PROPS,
  BORDER_PROPS: () => BORDER_PROPS,
  BORDER_RADIUS_PROPS: () => BORDER_RADIUS_PROPS,
  BORDER_STYLE_PROPS: () => BORDER_STYLE_PROPS,
  BORDER_WIDTH_PROPS: () => BORDER_WIDTH_PROPS,
  FLEXBOX_PROPS: () => FLEXBOX_PROPS,
  GAP_PROPS: () => GAP_PROPS,
  GRID_PROPS: () => GRID_PROPS,
  LAYOUT_PROPS: () => LAYOUT_PROPS,
  MARGIN_PROPS: () => MARGIN_PROPS,
  OVERFLOW_PROPS: () => OVERFLOW_PROPS,
  PADDING_PROPS: () => PADDING_PROPS,
  POSITION_PROPS: () => POSITION_PROPS,
  ResponsiveProp: () => ResponsiveProp,
  SHADOW_PROPS: () => SHADOW_PROPS,
  SPACE_PROPS: () => SPACE_PROPS,
  StyleResetProp: () => StyleResetProp,
  TYPOGRAPHY_PROPS: () => TYPOGRAPHY_PROPS,
  isBackgroundColorTokenProp: () => isBackgroundColorTokenProp,
  isBorderColorTokenProp: () => isBorderColorTokenProp,
  isBorderRadiusTokenProp: () => isBorderRadiusTokenProp,
  isBorderWidthTokenProp: () => isBorderWidthTokenProp,
  isBoxShadowTokenProp: () => isBoxShadowTokenProp,
  isFontFamilyTokenProp: () => isFontFamilyTokenProp,
  isFontSizeTokenProp: () => isFontSizeTokenProp,
  isFontWeightTokenProp: () => isFontWeightTokenProp,
  isGapTokenProp: () => isGapTokenProp,
  isHeightTokenProp: () => isHeightTokenProp,
  isIconSizeTokenProp: () => isIconSizeTokenProp,
  isLineHeightTokenProp: () => isLineHeightTokenProp,
  isMarginTokenProp: () => isMarginTokenProp,
  isMaxHeightTokenProp: () => isMaxHeightTokenProp,
  isMaxWidthTokenProp: () => isMaxWidthTokenProp,
  isMinHeightTokenProp: () => isMinHeightTokenProp,
  isMinWidthTokenProp: () => isMinWidthTokenProp,
  isPaddingTokenProp: () => isPaddingTokenProp,
  isSpaceTokenProp: () => isSpaceTokenProp,
  isTextColorTokenProp: () => isTextColorTokenProp,
  isWidthTokenProp: () => isWidthTokenProp,
  isZIndexTokenProp: () => isZIndexTokenProp
});
module.exports = __toCommonJS(src_exports);

// src/background.ts
var BACKGROUND_PROPS = [
  "background",
  "backgroundColor",
  "backgroundImage",
  "backgroundSize",
  "backgroundPosition",
  "backgroundRepeat",
  "backgroundAttachment"
];

// src/border.ts
var BORDER_RADIUS_PROPS = [
  "borderRadius",
  "borderBottomLeftRadius",
  "borderBottomRightRadius",
  "borderTopLeftRadius",
  "borderTopRightRadius"
];
var BORDER_WIDTH_PROPS = [
  "borderWidth",
  "borderBottomWidth",
  "borderLeftWidth",
  "borderRightWidth",
  "borderTopWidth"
];
var BORDER_COLOR_PROPS = [
  "borderColor",
  "borderBottomColor",
  "borderLeftColor",
  "borderRightColor",
  "borderTopColor"
];
var BORDER_STYLE_PROPS = [
  "borderStyle",
  "borderTopStyle",
  "borderRightStyle",
  "borderBottomStyle",
  "borderLeftStyle"
];
var BORDER_PROPS = [
  ...BORDER_RADIUS_PROPS,
  ...BORDER_WIDTH_PROPS,
  ...BORDER_COLOR_PROPS,
  ...BORDER_STYLE_PROPS,
  "border",
  "borderTop",
  "borderRight",
  "borderBottom",
  "borderLeft",
  "borderX",
  "borderY"
];

// src/flexbox.ts
var FLEXBOX_PROPS = [
  "alignContent",
  "alignItems",
  "alignSelf",
  "flex",
  "flexBasis",
  "flexDirection",
  "flexGrow",
  "flexShrink",
  "flexWrap",
  "justifyContent",
  "justifyItems",
  "justifySelf",
  "order"
];

// src/grid.ts
var GRID_PROPS = [
  "gridColumn",
  "gridRow",
  "gridAutoFlow",
  "gridAutoColumns",
  "gridAutoRows",
  "gridTemplateColumns",
  "gridTemplateRows",
  "gridTemplateAreas",
  "gridArea"
];

// src/layout.ts
var OVERFLOW_PROPS = ["overflow", "overflowX", "overflowY"];
var LAYOUT_PROPS = [
  ...OVERFLOW_PROPS,
  "width",
  "minWidth",
  "maxWidth",
  "height",
  "minHeight",
  "maxHeight",
  "size",
  "display",
  "verticalAlign"
];

// src/position.ts
var POSITION_PROPS = ["position", "left", "right", "top", "bottom", "zIndex"];

// src/shadow.ts
var SHADOW_PROPS = ["boxShadow", "textShadow"];

// src/space.ts
var MARGIN_PROPS = [
  "margin",
  "m",
  "marginTop",
  "mt",
  "marginRight",
  "mr",
  "marginBottom",
  "mb",
  "marginLeft",
  "ml",
  "marginX",
  "mx",
  "marginY",
  "my"
];
var PADDING_PROPS = [
  "padding",
  "p",
  "paddingTop",
  "pt",
  "paddingRight",
  "pr",
  "paddingBottom",
  "pb",
  "paddingLeft",
  "pl",
  "paddingX",
  "px",
  "paddingY",
  "py"
];
var GAP_PROPS = ["columnGap", "rowGap"];
var SPACE_PROPS = [...MARGIN_PROPS, ...PADDING_PROPS, ...GAP_PROPS];

// src/typography.ts
var TYPOGRAPHY_PROPS = [
  "fontFamily",
  "fontSize",
  "fontStyle",
  "fontWeight",
  "letterSpacing",
  "lineHeight",
  "textAlign",
  "color",
  "textDecoration",
  "textOverflow",
  "textTransform",
  "whiteSpace",
  "wordBreak",
  "wordWrap",
  "overflowWrap"
];

// src/proptypes/background.ts
var import_theme = require("@twilio-paste/theme");

// src/proptypes/utils/propValidator.ts
var propValidator = (optionsList) => {
  return (props, propName, componentName) => {
    const suppliedValue = props[propName];
    const propError = new Error(
      `[${componentName}]: invalid prop supplied "${propName}=${suppliedValue}", expected a token value. See https://paste.twilio.design/tokens for available options.`
    );
    const isInvalidToken = (value) => !optionsList.includes(value);
    if (suppliedValue != null) {
      if (Array.isArray(suppliedValue)) {
        for (const value of suppliedValue) {
          if (isInvalidToken(value)) {
            return propError;
          }
        }
      } else if (isInvalidToken(suppliedValue)) {
        return propError;
      }
    }
    return null;
  };
};

// src/proptypes/background.ts
var BackgroundColorOptions = ["none", "transparent", ...Object.keys(import_theme.DefaultTheme.backgroundColors)];
var isBackgroundColorTokenProp = propValidator(BackgroundColorOptions);

// src/proptypes/border.ts
var import_theme2 = require("@twilio-paste/theme");
var BorderRadiusOptions = Object.keys(import_theme2.DefaultTheme.radii);
var BorderWidthOptions = Object.keys(import_theme2.DefaultTheme.borderWidths);
var BorderColorOptions = ["transparent", ...Object.keys(import_theme2.DefaultTheme.borderColors)];
var isBorderRadiusTokenProp = propValidator(BorderRadiusOptions);
var isBorderWidthTokenProp = propValidator(BorderWidthOptions);
var isBorderColorTokenProp = propValidator(BorderColorOptions);

// src/proptypes/layout.ts
var import_prop_types2 = __toESM(require("prop-types"));
var import_theme3 = require("@twilio-paste/theme");

// src/proptypes/utils/responsivePropValidator.ts
var import_prop_types = __toESM(require("prop-types"));
var ResponsiveProp = (type) => {
  return import_prop_types.default.oneOfType([type, import_prop_types.default.arrayOf(type)]);
};

// src/proptypes/layout.ts
var IconSizeOptions = Object.keys(import_theme3.DefaultTheme.iconSizes);
var isWidthTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isMinWidthTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isMaxWidthTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isHeightTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isMinHeightTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isMaxHeightTokenProp = ResponsiveProp(import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.number]));
var isIconSizeTokenProp = propValidator(IconSizeOptions);

// src/proptypes/position.ts
var import_theme4 = require("@twilio-paste/theme");
var ZIndexOptions = Object.keys(import_theme4.DefaultTheme.zIndices);
var isZIndexTokenProp = propValidator(ZIndexOptions);

// src/proptypes/shadow.ts
var import_theme5 = require("@twilio-paste/theme");
var BoxShadowOptions = ["none", ...Object.keys(import_theme5.DefaultTheme.shadows)];
var isBoxShadowTokenProp = propValidator(BoxShadowOptions);

// src/proptypes/space.ts
var import_theme6 = require("@twilio-paste/theme");
var SpaceOptions = Object.keys(import_theme6.DefaultTheme.space);
var MarginOptions = ["auto", ...Object.keys(import_theme6.DefaultTheme.space)];
var isSpaceTokenProp = propValidator(SpaceOptions);
var isPaddingTokenProp = propValidator(SpaceOptions);
var isMarginTokenProp = propValidator(MarginOptions);
var isGapTokenProp = propValidator(SpaceOptions);

// src/proptypes/typography.ts
var import_theme7 = require("@twilio-paste/theme");
var FontFamilyOptions = ["inherit", ...Object.keys(import_theme7.DefaultTheme.fonts)];
var FontSizeOptions = ["100%", "inherit", ...Object.keys(import_theme7.DefaultTheme.fontSizes)];
var FontWeightOptions = ["inherit", ...Object.keys(import_theme7.DefaultTheme.fontWeights)];
var LineHeightOptions = ["unset", "inherit", ...Object.keys(import_theme7.DefaultTheme.lineHeights)];
var TextColorOptions = ["currentColor", "inherit", ...Object.keys(import_theme7.DefaultTheme.textColors)];
var isFontFamilyTokenProp = propValidator(FontFamilyOptions);
var isFontSizeTokenProp = propValidator(FontSizeOptions);
var isFontWeightTokenProp = propValidator(FontWeightOptions);
var isLineHeightTokenProp = propValidator(LineHeightOptions);
var isTextColorTokenProp = propValidator(TextColorOptions);

// src/proptypes/helpers.ts
var import_prop_types3 = __toESM(require("prop-types"));
var StyleResetProp = import_prop_types3.default.oneOf(["none", "inherit", "initial", "unset"]);
